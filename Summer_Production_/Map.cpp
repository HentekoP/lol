
#include "main.h"
#include "Map.h"

int data[] =
{
	// 横20x15
	1,  0,  0,  0,  0,   0,  0,  0,  0,  0,   0,  0,  0,  0,  0,   0,  0,  0,  0, 1,
	1,  0,  0,  0,  0,   0,  0,  0,  0,  0,   0,  0,  0,  0,  0,   0,  0,  0,  0, 1,
	1,  0,  0,  0,  0,   0,  0,  0,  0,  0,   0,  0,  0,  0,  0,   0,  0,  0,  0, 1,
	1,  0,  0,  0,  0,   0,  0, 1, 1, 1,  1, 1,  0,  0,  0,   0,  0,  0,  0, 1,
	1,  0,  0,  0,  0,   0,  0, 1,  0,  0,   0,  0,  0,  0,  0,   0,  0,  0,  0, 1,

	1,  0, 1, 1, 1,  1,  0, 1,  0,  0,   0,  0,  0,  0,  0,   0,  0,  0,  0, 1,
	1,  0,  0,  0,  0,   0,  0, 1,  0,  0,   0,  0,  0,  0, 1,  1, 1, 1,  0, 1,
	1,  0,  0,  0,  0,   0,  0, 1,  0,  0,   0,  0,  0,  0,  0,   0,  0,  0,  0, 1,
	1,  0,  0,  0,  0,   0,  0, 1,  0,  0,   0,  0,  0,  0,  0,   0,  0,  0,  0, 1,
	1,  0,  0,  0,  0,   0,  0, 1, 1, 1,  1, 1,  0,  0,  0,   0,  0,  0,  0, 1,

	1,  0,  0,  0,  0,   0,  0,  0,  0,  0,   0,  0,  0,  0,  0,   0,  0,  0,  0, 1,
	1,  0,  0, 1, 1,  1,  0,  0,  0,  0,   0,  0,  0,  0, 1,  1, 1,  0,  0, 1,
	1,  0,  0,  0,  0,   0,  0,  0,  0,  0,   0,  0,  0,  0,  0,   0,  0,  0,  0, 1,
	1,  0,  0,  0,  0,   0,  0,  0,  0,  0,   0,  0,  0,  0,  0,   0,  0,  0,  0, 1,
	1,  1,  1,  1,  1,    1, 1, 1, 1, 1, 0, 0, 0, 1,  1,  1,  1,  1,   1,  1,
};

//----------------------------------------
// マップの初期化
//----------------------------------------
void MAP_Init()
{
	/*LoadDivGraph("../background/sora.png", NUM_CHIP_ALL,
		NUM_CHIP_X, NUM_CHIP_Y,
		SIZE_MAP_X, SIZE_MAP_Y,
		block);*/
	sora[0] = LoadGraph("background/sora.png");
	sora[1] = LoadGraph("1-1/kara_block.png");
}

//----------------------------------------
// マップの描画
//----------------------------------------

int karablock;

void MAP_Draw()
{
	// 背景描画
	for (int j = 0; j < NUM_MAP_Y; j++)
	{
		for (int i = 0; i < NUM_MAP_X; i++)
		{
			int no = data[i + j * NUM_MAP_X];
			DrawGraph(i * SIZE_MAP_X, j * SIZE_MAP_Y, sora[no], TRUE);
		}
	}
}

void DrawBlock()
{
	int DrawGraph();
}
//============================================================
// 地形の当たり判定の処理
//============================================================
//============================================================
//============================================================
//============================================================
void MAP_HitCheck()
{
	// ブロックの当たり判定
	for (int j = 0; j < NUM_MAP_Y; j++)
	{
		for (int i = 0; i < NUM_MAP_X; i++)
		{
			int no = data[i + j * NUM_MAP_X];
			if (no >= 1 && no < 10)
			{
				// ①今まで使用している当たり判定をfloatにして処理を行う(※CheckHitの中を参照)
				if (CheckHit(i * SIZE_MAP_X, j * SIZE_MAP_Y, SIZE_MAP_X, SIZE_MAP_Y, x, y, CHARA_WIDTH, CHARA_HEIGHT))
				{
					// ②上から当たっているかチェック
					if (y >= old_y)
					{
						// ③地形よりも上から当たっているかチェックする
						// その場合のみYを補正
						// そうでない場合は横から当たっている
						if (j * SIZE_MAP_Y - CHARA_HEIGHT >= old_y)
						{
							// ④地形に上から当たっている
							old_y = j * SIZE_MAP_Y - CHARA_HEIGHT;
							y = old_y;
							yadd = 0.0f;
						}
						else
						{
							// ⑤地形の横から当たっている
							// マスクするためintを使用します (floatだと、割って掛けると同じ値になってしまう)
							int _x = std::max(x, old_x);
							_x /= SIZE_MAP_X;
							_x *= SIZE_MAP_X;
							x = _x;
							old_x = x;
						}
					}
					// 下から当たっているかチェック
					else if (y < old_y)
					{
						// 地形よりも下から当たっているかチェックする
						// その場合のみYを補正
						// そうでない場合は横から当たっている
						if ((j + 1) * SIZE_MAP_Y <= old_y)
						{
							old_y = (j + 1) * SIZE_MAP_Y;
							y = old_y;
							yadd = 0.0f;
						}
						else
						{
							// 地形の横から当たっている
							// マスクするためintを使用します (floatだと、割って掛けると同じ値になってしまう)
							int _x = std::max(x, old_x);
							_x /= SIZE_MAP_X;
							_x *= SIZE_MAP_X;
							x = _x;
							old_x = x;
						}
					}
				}
			}
		}
	}
}

